     1                                  bits 32
     2                                  global start
     3                                  
     4                                  extern exit, printf
     5                                  import exit msvcrt.dll
     6                                  import printf msvcrt.dll
     7                                  
     8                                  segment data use32 class=data
     9                                  ; A string of doublewords is given. Order in increasing order the string of the high words (most significant) from these doublewords. The low words (least significant) remain unchanged.
    10 00000000 CDAB56127856AB1244-         numbers dd 1256ABCDh, 12AB5678h, 12344344h, 11239080h
    10 00000009 43341280902311     
    11                                      len equ $-numbers
    12 00000010 00000000<rept>              highParts times len dd 0
    13 00000050 00000000<rept>              newNumbers times len dd 0
    14 00000090 00000000                    highest dd 0
    15 00000094 00000000                    lowest dd 0
    16 00000098 256420                      msg db '%d '
    17                                  segment code use32 class=code
    18                                      start:
    19 00000000 EB1A                            jmp main
    20                                          ;reverses the values of eax and edx
    21                                          reverseNumbers:
    22 00000002 A3[90000000]                        mov [highest], eax
    23 00000007 8915[94000000]                      mov [lowest], edx
    24 0000000D A1[94000000]                        mov eax, [lowest]
    25 00000012 8B15[90000000]                      mov edx, [highest]
    26 00000018 89FB                                mov ebx, edi
    27 0000001A EB5C                            jmp continueSorting; jumps back where it was called during the sorting
    28                                          
    29                                          main:
    30 0000001C B910000000                      mov ecx, len; ecx = length of array numbers (number of bytes of the array)
    31 00000021 BE00000000                      mov esi, 0; starting from first element of array numbers
    32 00000026 BF[10000000]                    mov edi, highParts; we set highParts as the destination array
    33 0000002B E364                            jecxz endc; jumps to end of code if the numbers array has no elements
    34                                          
    35                                          ; here we isolate the high parts oh the elements of the numbers array
    36                                          findHighParts:
    37                                              ; we set the low part of the current element of the highParts array to 0
    38 0000002D B000                                mov al, 0
    39 0000002F AA                                  stosb
    40 00000030 AA                                  stosb
    41 00000031 83C602                              add esi, 2; adjusts the offset for the numbers array
    42 00000034 51                                  push ecx; we save the value of ecx before modifying it so that the current loop will continue as intended
    43 00000035 B902000000                          mov ecx, 2
    44                                              ; we set the high part of the current element of the highParts array to the highPart of the respective element in the numbers array
    45                                              getFromNumbers:
    46 0000003A 8A86[00000000]                          mov al, [numbers+esi]
    47 00000040 AA                                      stosb
    48 00000041 46                                      inc esi
    49 00000042 E2F6                                loop getFromNumbers
    50 00000044 59                                  pop ecx; we reset the value of ecx to what it was before the modification
    51 00000045 E2E6                            loop findHighParts
    52                                          
    53 00000047 BE00000000                      mov esi, 0; starting from the first element from the highParts array
    54 0000004C B903000000                      mov ecx, len/4 - 1; we set ecx to the lenth of the highParts array -1
    55                                          sortHighParts:
    56 00000051 51                                  push ecx; we save the value of ecx before modifying it so that the current loop will continue as intended
    57                                              ; we determine the offset of the element from the 
    58 00000052 BF00000000                          mov edi, 0
    59 00000057 89F1                                mov ecx, esi
    60 00000059 E308                                jecxz afterNextAddress
    61                                              findNextAddress:
    62 0000005B 83C704                                  add edi, 4
    63 0000005E 83E903                                  sub ecx, 3
    64 00000061 E2F8                                loop findNextAddress
    65                                              afterNextAddress:
    66 00000063 83C704                              add edi, 4
    67 00000066 59                                  pop ecx; we reset the value of ecx to what it was before the modification
    68 00000067 8B86[10000000]                      mov eax, [highParts+esi]; eax = current element from the highParts array
    69 0000006D 51                                  push ecx; we save the value of ecx before modifying it so that the current loop will continue as intended
    70                                              sortNewNumbers:
    71 0000006E 8B97[10000000]                          mov edx, [highParts+edi]; edx = current element of the highParts array + offset edi
    72 00000074 39D0                                    cmp eax, edx; compares eax to edx
    73 00000076 778A                                    ja reverseNumbers; jumos to reverseNumbers if eax > edx
    74                                                  continueSorting:
    75 00000078 8986[10000000]                          mov dword [highParts+esi], eax; current element of highParts = lowest between eax and edx
    76 0000007E 8997[10000000]                          mov dword [highParts+edi], edx; current element of highParts = highest between eax and edx
    77 00000084 83C704                                  add edi, 4; advance to next element of highParts
    78 00000087 E2E5                                loop sortNewNumbers
    79 00000089 59                                  pop ecx; we reset the value of ecx to what it was before the modification
    80 0000008A 83C604                              add esi, 4; advance to next element of highParts
    81 0000008D E2C2                            loop sortHighParts
    82 0000008F EB2E                            jmp completeWithLowParts; jumps to the completeWithLowParts section
    83                                          
    84                                          ; prints out the elements of highParts and exits the program
    85                                          endc:
    86 00000091 B904000000                      mov ecx, len/4
    87 00000096 BE00000000                      mov esi, 0
    88                                          showNewNumbers:
    89 0000009B 8B86[10000000]                      mov eax, [highParts+esi]
    90 000000A1 51                                  push ecx
    91 000000A2 50                                  push eax
    92 000000A3 68[98000000]                        push dword msg
    93 000000A8 FF15[00000000]                      call [printf]
    94 000000AE 83C408                              add esp, 4*2
    95 000000B1 59                                  pop ecx
    96 000000B2 83C604                              add esi, 4
    97 000000B5 E2E4                            loop showNewNumbers
    98 000000B7 6A00                            push    dword 0
    99 000000B9 FF15[00000000]                  call    [exit]
   100                                          
   101                                          ;completes the low parts of the elements from highParts with the low parts of the respective elements from numbers
   102                                          completeWithLowParts:
   103 000000BF B910000000                      mov ecx, len; ecx = length of numbers array (number of bytes in array)
   104 000000C4 BE00000000                      mov esi, 0; starting from the first byte of numbers
   105 000000C9 BF00000000                      mov edi, 0; starting from the first byte of highParts
   106                                          findLowParts:
   107 000000CE 51                                  push ecx; we save the value of ecx before modifying it so that the current loop will continue as intended
   108 000000CF B902000000                          mov ecx, 2
   109                                              ; we set the low part of the current element of highParts to the low part of the respective element from numbers
   110                                              searchInNumbers:
   111 000000D4 8A86[00000000]                          mov al, [numbers+esi]
   112 000000DA 8887[10000000]                          mov [highParts+edi], al
   113 000000E0 47                                      inc edi
   114 000000E1 46                                      inc esi
   115 000000E2 E2F0                                loop searchInNumbers
   116 000000E4 59                                  pop ecx; we reset the value of ecx to what it was before the modification
   117 000000E5 83C602                              add esi, 2; we skip the high part of the current element from numbers
   118 000000E8 83C702                              add edi, 2; we skip the high part of the current element from highParts
   119 000000EB E2E1                            loop findLowParts
   120 000000ED EBA2                            jmp endc; jumps to end of code
