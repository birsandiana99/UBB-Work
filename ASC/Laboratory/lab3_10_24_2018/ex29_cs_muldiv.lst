     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; (a+b)/(c-2)-d+2-x; a,b,c-byte; d-doubleword; x-qword
    14 00000000 05                          a db 5
    15 00000001 05                          b db 5
    16 00000002 05                          c db 5
    17 00000003 0A000000                    d dd 10
    18 00000007 0A00000000000000            x dq 10
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 A0[00000000]                    mov al, [a]
    24 00000005 0205[01000000]                  add al, [b]; al = a+b
    25 0000000B 8A1D[02000000]                  mov bl, [c]
    26 00000011 80EB02                          sub bl, 2; bl = c-2
    27 00000014 6698                            cbw; ax = a+b
    28 00000016 F6FB                            idiv bl
    29 00000018 6698                            cbw
    30 0000001A 98                              cwde; edx = (a-b)/(c-2)
    31 0000001B 2B05[03000000]                  sub eax, [d]; eax = (a+b)/(c-2) - d
    32 00000021 83C002                          add eax, 2; eax = (a+b)/(c-2) - d + 2
    33 00000024 99                              cdq
    34 00000025 8B1D[07000000]                  mov ebx, dword [x]
    35 0000002B 8B0D[0B000000]                  mov ecx, dword [x+4]
    36 00000031 29D8                            sub eax, ebx
    37 00000033 19CA                            sbb edx, ecx; edx:eax = (a+b)/(c+2) - d + 2 - x
    38                                          ; exit(0)
    39 00000035 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    40 00000037 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
