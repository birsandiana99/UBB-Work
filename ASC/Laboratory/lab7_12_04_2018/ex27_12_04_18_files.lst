     1                                  bits 32
     2                                  global start
     3                                  
     4                                  extern exit, fopen, fclose, fread, printf, fprintf
     5                                  import exit msvcrt.dll
     6                                  import fopen msvcrt.dll
     7                                  import fclose msvcrt.dll
     8                                  import fread msvcrt.dll
     9                                  import fprintf msvcrt.dll
    10                                  import printf msvcrt.dll
    11                                  
    12                                  segment data use32 class = data:
    13 00000000 696E7075745F657832-         file db 'input_ex27.txt', 0
    13 00000009 372E74787400       
    14 0000000F 7200                        modread db 'r', 0
    15 00000011 6100                        modwrite db "a", 0
    16 00000013 FF6BCA08                    min dd 147483647
    17 00000017 FFFFFFFF                    handle1 dd -1
    18                                      space equ ' '
    19 0000001B 00000000                    currentNumber dd 0
    20 0000001F 256400                      printFormat db '%d', 0
    21 00000022 20256400                    appendFormat db " %d", 0
    22 00000026 00                          value db 0
    23 00000027 00<rept>                    appendString times 10 db 0
    24                                  
    25                                  segment code use32 class=code:
    26                                      start:
    27                                          ; opend the file in read mode
    28 00000000 68[0F000000]                    push dword modread
    29 00000005 68[00000000]                    push dword file
    30 0000000A FF15[00000000]                  call [fopen]
    31 00000010 83C408                          add esp, 4*2
    32                                          
    33 00000013 A3[17000000]                    mov [handle1], eax; handle1 = handle for file in read mode
    34 00000018 83F800                          cmp eax, 0; checks if there was an error while opening the file
    35 0000001B 0F848C000000                    je error; jumps to end of code if there was an error while opening the file
    36                                          
    37                                          ; reads the contents from the input file and stores them in the value variable
    38 00000021 FF35[17000000]                  push dword [handle1]
    39 00000027 6A64                            push dword 100
    40 00000029 6A01                            push dword 1
    41 0000002B 68[26000000]                    push dword value
    42 00000030 FF15[00000000]                  call [fread]
    43 00000036 83C410                          add esp, 4*4
    44 00000039 83F800                          cmp eax, 0; checks if there was an error while reading the file
    45 0000003C 746F                            je error; jumps to end of code if there was an error while reading from the file
    46                                          
    47                                          ; closes the input file
    48 0000003E FF35[17000000]                  push dword [handle1]
    49 00000044 FF15[00000000]                  call [fclose]
    50 0000004A 83C404                          add esp, 4*1
    51                                          
    52                                          ; goes through every character that was read from the input file
    53 0000004D BE00000000                      mov esi, 0
    54                                          findNumbers:
    55 00000052 8A86[26000000]                      mov al, byte [value+esi]
    56 00000058 50                                  push eax
    57 00000059 3C00                                cmp al, 0; checks if we've reached the end of the input
    58 0000005B 7436                                je spaceCase; evaluates the last number from the input
    59 0000005D 3C20                                cmp al, space; checks if we've reached a space character (a.k.a. we found a new number)
    60 0000005F 7432                                je spaceCase; evaluates the newly found number
    61                                              
    62                                              ; builds the current number
    63 00000061 8B1D[1B000000]                      mov ebx, [currentNumber]
    64 00000067 EB1B                                jmp mul10; the unit digit becomes the decimal digit, decimal -> hundreds, ...
    65                                              ; add the current digit to the number that is being built
    66                                              addNextDigit:
    67 00000069 891D[1B000000]                      mov dword [currentNumber], ebx
    68 0000006F 2C30                                sub al, 48
    69 00000071 6698                                cbw
    70 00000073 98                                  cwde
    71 00000074 0105[1B000000]                      add [currentNumber], eax
    72                                              
    73                                              continue:
    74 0000007A 46                                  inc esi; advances to the next character
    75 0000007B 58                                  pop eax
    76 0000007C 3C00                                cmp al, 0; checks if we've reached end of input
    77 0000007E 7446                                je endc; jumps to end of code if we've reached end of input
    78 00000080 EBD0                            jmp findNumbers
    79                                          
    80 00000082 EB42                            jmp endc
    81                                          
    82                                          ; multiplies a number by 10 without doubleing it's size
    83                                          mul10:
    84 00000084 B909000000                          mov ecx, 9
    85                                              do:
    86 00000089 031D[1B000000]                          add ebx, [currentNumber]
    87 0000008F E2F8                                loop do
    88 00000091 EBD6                            jmp addNextDigit; jumps back to where it was called
    89                                          
    90                                          ; compares the current minimum and the newly found number, updating each as it is needed
    91                                          spaceCase:
    92 00000093 8B15[1B000000]                      mov edx, [currentNumber]
    93 00000099 3915[13000000]                      cmp [min], edx; compares the newly found number to the current minimum
    94 0000009F 771D                                ja setMinimum; updates minimum if the new number is lower that the current minimum
    95                                              continueSpaceCase:
    96 000000A1 C705[1B000000]0000-                 mov dword [currentNumber], 0; resets the current number to 0, preparing it for the building of the next number
    96 000000A9 0000               
    97 000000AB EBCD                            jmp continue
    98                                          
    99                                          ; closes the input file in case of an I/O error
   100                                          error:
   101 000000AD FF35[17000000]                      push dword [handle1]
   102 000000B3 FF15[00000000]                      call [fclose]
   103 000000B9 83C404                              add esp, 4*1
   104 000000BC EB69                            jmp endprog
   105                                          
   106                                          ; updates the minimum variable
   107                                          setMinimum:
   108 000000BE 8915[13000000]                      mov [min], edx
   109 000000C4 EBDB                            jmp continueSpaceCase
   110                                          
   111                                          endc:
   112                                          ; prints the lowest value from the input to the console
   113 000000C6 FF35[13000000]                      push dword [min]
   114 000000CC 68[1F000000]                        push dword printFormat
   115 000000D1 FF15[00000000]                      call [printf]
   116 000000D7 83C408                              add esp, 4*2
   117                                           
   118                                          
   119                                          ; opens the input file in append mode
   120 000000DA 68[11000000]                        push modwrite
   121 000000DF 68[00000000]                        push file
   122 000000E4 FF15[00000000]                      call [fopen]
   123 000000EA 83C408                              add esp, 4*2
   124                                              
   125 000000ED A3[17000000]                        mov [handle1], eax
   126 000000F2 83F800                              cmp eax, 0; checks if there was an error while opening the file
   127 000000F5 74B6                                je error; jumps to end of code if there was an error while opening the file
   128                                              
   129                                              appendToFile:
   130 000000F7 C686[27000000]00                    mov byte [appendString+esi], 0
   131                                              ; appends to the end of the input file it's lowest value
   132 000000FE FF35[13000000]                      push dword [min]
   133 00000104 68[22000000]                        push dword appendFormat
   134 00000109 FF35[17000000]                      push dword [handle1]
   135 0000010F FF15[00000000]                      call [fprintf]
   136 00000115 83C40C                              add esp, 4*3
   137                                              
   138                                              ; closes the file
   139 00000118 FF35[17000000]                      push dword [handle1]
   140 0000011E FF15[00000000]                      call [fclose]
   141 00000124 83C404                              add esp, 4*1
   142                                              
   143                                              endprog:
   144                                              
   145 00000127 6A00                                push dword 0
   146 00000129 FF15[00000000]                      call [exit]
