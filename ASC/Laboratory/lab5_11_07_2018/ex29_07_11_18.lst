     1                                  bits 32
     2                                  global start
     3                                  
     4                                  extern exit, printf
     5                                  import exit msvcrt.dll
     6                                  import printf msvcrt.dll
     7                                  
     8                                  segment data use32 class=data
     9 00000000 010203040506                array1 db 1, 2, 3, 4, 5, 6
    10                                      l1 equ $-array1
    11 00000006 00                          a db 0
    12 00000007 00<rept>                    array2 times l1-1 db 0
    13 0000000C 256420                      msg db '%d '
    14                                  
    15                                  segment code use32 class=code
    16                                      start:
    17 00000000 B906000000                      mov ecx, l1; ecx = lenght of array1
    18 00000005 BA00000000                      mov edx, 0; edx = current legth of array2
    19 0000000A 49                              dec ecx; account for initialization of al with the first element of array1
    20 0000000B A0[00000000]                    mov al, [array1+0]; al = first element of array1
    21 00000010 BE01000000                      mov esi, 1; esi = 1 because al = first element of array1
    22 00000015 BF[07000000]                    mov edi, array2
    23 0000001A E31D                            jecxz endc
    24                                          findNewArray:
    25 0000001C 0286[00000000]                      add al, [array1+esi];al = array1[i-2] + array1[i-1] + array1[i]
    26 00000022 2A05[06000000]                      sub al, [a]; bl = bl - array1[i-2]
    27 00000028 8A9E[FFFFFFFF]                      mov bl, [array1+esi-1]; al = array1[i-1]
    28 0000002E 881D[06000000]                      mov [a], bl; a = array1[i-1]
    29 00000034 AA                                  stosb; append al to array2
    30 00000035 42                                  inc edx; extend length of array2 by 1
    31 00000036 46                                  inc esi; advance to next element of array1
    32 00000037 E2E3                            loop findNewArray
    33                                          endc:
    34                                          ; code for printing the elements of array2
    35 00000039 89D1                            mov ecx, edx; ecx = length of array2
    36 0000003B BE00000000                      mov esi, 0; we start at first element of array2
    37                                          showNewArray:
    38 00000040 8A86[07000000]                      mov al, [array2+esi]; al = array2[esi]
    39 00000046 6698                                cbw; ax = al
    40 00000048 98                                  cwde; eax = ax
    41 00000049 51                                  push ecx
    42 0000004A 50                                  push eax
    43 0000004B 68[0C000000]                        push dword msg
    44 00000050 FF15[00000000]                      call [printf]
    45 00000056 83C408                              add esp, 4*2
    46 00000059 59                                  pop ecx
    47 0000005A 46                                  inc esi; advance to the next element of array2
    48 0000005B E2E3                            loop showNewArray
    49 0000005D 6A00                            push    dword 0
    50 0000005F FF15[00000000]                  call    [exit]
