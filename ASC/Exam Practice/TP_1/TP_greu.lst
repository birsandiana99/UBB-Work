     1                                  bits 32
     2                                  global start
     3                                  
     4                                  extern exit, fopen, fclose, fread, printf
     5                                  import exit msvcrt.dll
     6                                  import fopen msvcrt.dll
     7                                  import fclose msvcrt.dll
     8                                  import fread msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  
    11                                  segment data use32 class=data
    12 00000000 72312E74787400              inputFile db 'r1.txt', 0
    13 00000007 7200                        modRead db 'r', 0
    14 00000009 256300                      printFormat db '%c', 0
    15 0000000C 414243444546474849-         alphabet db "ABCDEFGHIJKLMNOPRSTUVWXYZ", 0
    15 00000015 4A4B4C4D4E4F505253-
    15 0000001E 5455565758595A00   
    16 00000026 00<rept>                    text times 100 db 0
    17                                      space equ ' '
    18 0000008A FFFFFFFF                    handle dd -1
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; opens the file in read mode
    22 00000000 68[07000000]                    push dword modRead
    23 00000005 68[00000000]                    push dword inputFile
    24 0000000A FF15[00000000]                  call [fopen]
    25 00000010 83C408                          add esp, 4*2
    26 00000013 A3[8A000000]                    mov [handle], eax
    27 00000018 83F800                          cmp eax, 0; checks if there was an error while opening the file
    28 0000001B 747C                            je endc; jumps to end of code if an error occured
    29                                          
    30                                          ; reads the contents of the file
    31 0000001D FF35[8A000000]                  push dword [handle]
    32 00000023 6A64                            push dword 100
    33 00000025 6A01                            push dword 1
    34 00000027 68[26000000]                    push dword text
    35 0000002C FF15[00000000]                  call [fread]
    36 00000032 83C410                          add esp, 4*4
    37                                          
    38 00000035 BE00000000                      mov esi, 0; we start from the first character in the input
    39                                          decode:
    40 0000003A 8A86[26000000]                      mov al, byte [text + esi]; al = current character
    41                                              ; check if al is a char or not
    42 00000040 BF00000000                          mov edi, 0; we start from the first leter of the alphabet
    43                                              checkIfChar:
    44 00000045 8A9F[0C000000]                          mov bl, [alphabet+edi]; bl = current leter in the alphabet
    45 0000004B 80FB00                                  cmp bl, 0; checks if the end of the alphabet was reached
    46 0000004E 740E                                    je notChar; jumps to notChar section if so
    47 00000050 38D8                                    cmp al, bl; checks if al is a upper-case letter
    48 00000052 7410                                    je char; jumps to char section if so
    49 00000054 80C320                                  add bl, 32; makes bl lower-case
    50 00000057 38D8                                    cmp al, bl; checks if al is a lower-case letter
    51 00000059 7409                                    je char; jumps to char section if so
    52 0000005B 47                                      inc edi; advances to the next character in the alphabet
    53 0000005C EBE7                                jmp checkIfChar
    54                                              
    55                                              notChar:
    56 0000005E 3C00                                cmp al, 0
    57 00000060 7437                                je endc; jumps to end of code if the end of the input was reached
    58 00000062 EB20                                jmp printChar; jumps to character print section
    59                                              
    60                                              char:
    61                                              ; compares current caharacter to "A"
    62 00000064 3C41                                cmp al, 65
    63 00000066 7504                                jne cmp_B; jumps to next comparison if the character is different
    64 00000068 B05B                                mov al, 91
    65 0000006A EB16                                jmp translate; jumps to character translation
    66                                              
    67                                              ; compares current character to "B"
    68                                              cmp_B:
    69 0000006C 3C42                                cmp al, 66
    70 0000006E 7504                                jne cmp_a; jumps to next comparison if the character is different
    71 00000070 B05C                                mov al, 92
    72 00000072 EB0E                                jmp translate; jumps to character translation
    73                                              
    74                                              ; compares current character to "a"
    75                                              cmp_a:
    76 00000074 3C61                                cmp al, 97
    77 00000076 7504                                jne cmp_b; jumps to next comparison if the character is different
    78 00000078 B07B                                mov al, 123
    79 0000007A EB06                                jmp translate; jumps to character translation
    80                                              
    81                                              ; compares current character to "b"
    82                                              cmp_b:
    83 0000007C 3C62                                cmp al, 98
    84 0000007E 7502                                jne translate; jumps to character translation if the character is different
    85 00000080 B07C                                mov al, 124
    86                                              
    87                                              translate:; translates the current character
    88 00000082 2C02                                sub al, 2
    89                                              ; prints out the current translated character
    90                                              printChar:
    91 00000084 6698                                cbw
    92 00000086 98                                  cwde
    93 00000087 50                                  push eax
    94 00000088 68[09000000]                        push printFormat
    95 0000008D FF15[00000000]                      call [printf]
    96 00000093 83C408                              add esp, 4*2
    97 00000096 46                                  inc esi; advances to the next character
    98 00000097 EBA1                            jmp decode
    99                                          
   100                                          endc:
   101                                          ; closes the file
   102 00000099 FF35[8A000000]                  push dword [handle]
   103 0000009F FF15[00000000]                  call [fclose]
   104                                          ; exits the program
   105 000000A5 83C404                          add esp, 4*1
   106 000000A8 6A00                            push dword 0
   107 000000AA FF15[00000000]                  call [exit]
