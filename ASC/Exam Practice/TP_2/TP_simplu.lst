     1                                  bits 32
     2                                  global start
     3                                  
     4                                  extern exit, fopen, fprintf, scanf, printf, fclose 
     5                                  import exit msvcrt.dll
     6                                  import fopen msvcrt.dll
     7                                  import fprintf msvcrt.dll
     8                                  import scanf msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  
    12                                  segment data use32 class=data
    13 00000000 6F75747075742E7478-         file db "output.txt", 0
    13 00000009 7400               
    14 0000000B 50656E747275202564-         printFormat db "Pentru %d: b16:%x 1-uri in binar: %d", 10, 13, 0
    14 00000014 3A206231363A257820-
    14 0000001D 312D75726920696E20-
    14 00000026 62696E61723A202564-
    14 0000002F 0A0D00             
    15 00000032 00000000                    input dd 0
    16 00000036 7700                        modWrite db "w", 0
    17 00000038 256400                      readFormat db "%d", 0
    18 0000003B FFFFFFFF                    handle dd -1
    19 0000003F 00                          numberOf1s db 0
    20 00000040 496E74726F64756365-         msg db "Introduceti numere. introduceti 0 cand doriti sa incheiati programul.", 10, 13, 0
    20 00000049 7469206E756D657265-
    20 00000052 2E20696E74726F6475-
    20 0000005B 636574692030206361-
    20 00000064 6E6420646F72697469-
    20 0000006D 20736120696E636865-
    20 00000076 696174692070726F67-
    20 0000007F 72616D756C2E0A0D00 
    21                                  
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; opens the file in write mode
    25 00000000 68[36000000]                    push dword modWrite
    26 00000005 68[00000000]                    push dword file
    27 0000000A FF15[00000000]                  call [fopen]
    28 00000010 83C408                          add esp, 4*2
    29 00000013 A3[3B000000]                    mov [handle], eax
    30 00000018 83F800                          cmp eax, 0
    31 0000001B 747B                            je endc
    32                                          ; prints msg to the console
    33 0000001D 68[40000000]                    push msg
    34 00000022 FF15[00000000]                  call [printf]
    35 00000028 83C404                          add esp, 4*1
    36                                          
    37                                          readNumber:
    38                                              ; reads a number from the keyboard
    39 0000002B 68[32000000]                        push dword input
    40 00000030 68[38000000]                        push dword readFormat
    41 00000035 FF15[00000000]                      call [scanf]
    42 0000003B 83C408                              add esp, 4*2
    43 0000003E 833D[32000000]00                    cmp dword [input], 0; checks if the read number = 0
    44 00000045 7451                                je endc; ends the program if so
    45 00000047 8B1D[32000000]                      mov ebx, [input]
    46                                              ; finds how many 1s there are in the read number's binary representation
    47 0000004D EB1E                                jmp find1s
    48                                              continueReading:
    49                                              ; writes the requested data to the file
    50 0000004F FF35[3F000000]                      push dword [numberOf1s]
    51 00000055 53                                  push dword ebx
    52 00000056 53                                  push dword ebx
    53 00000057 68[0B000000]                        push dword printFormat
    54 0000005C FF35[3B000000]                      push dword [handle]
    55 00000062 FF15[00000000]                      call [fprintf]
    56 00000068 83C414                              add esp, 4*5
    57 0000006B EBBE                            jmp readNumber; repeats the process
    58                                  
    59                                          ; finds the number of 1s in the read number's binary representation
    60                                          find1s:
    61 0000006D C705[3F000000]0000-                 mov dword [numberOf1s], 0; there are 0 1s initially
    61 00000075 0000               
    62 00000077 B920000000                          mov ecx, 32; goes through an entire dword
    63                                              find:
    64 0000007C F705[32000000]0100-                     test dword [input], 00000000000000000000000000000001b; checks if last bit is 1
    64 00000084 0000               
    65 00000086 7406                                    jz zero; jumps to zero segment if current bit = 0
    66 00000088 FF05[3F000000]                          inc dword [numberOf1s]; increments numberOf1s otherwise
    67                                                  zero:
    68 0000008E D12D[32000000]                          shr dword [input], 1; advances to the next bit
    69 00000094 E2E6                                loop find; repeats until ecx = 0
    70 00000096 EBB7                                jmp continueReading; returns to where it was called
    71                                              
    72                                          endc:
    73                                              ;closes the file
    74 00000098 FF35[3B000000]                      push dword [handle]
    75 0000009E FF15[00000000]                      call [fclose]
    76 000000A4 83C404                              add esp, 4*1
    77                                              ; ends the program
    78 000000A7 6A00                                push    dword 0
    79 000000A9 FF15[00000000]                      call    [exit]
